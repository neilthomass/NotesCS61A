<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Home on CS61A NT</title>
    <link>https://neilthomass.github.io:1313/cs61a/</link>
    <description>Recent content in Home on CS61A NT</description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="https://neilthomass.github.io:1313/cs61a/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Control</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-2/control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-2/control/</guid>
      <description>&lt;h1 id=&#34;control&#34;&gt;&#xA;  Control&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#control&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;side-effects&#34;&gt;&#xA;  Side Effects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#side-effects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Side effects occur in functions when the function alters the global environment in some form. This could be in the form of altering a variable in the global scope, or using a print statement inside a function. One easy way to tell if a function contains side effects is that if a function acts like a mathematical function, it has no side effects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Higher Order Functions</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-2/higher-order-functions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-2/higher-order-functions/</guid>
      <description>&lt;h1 id=&#34;higher-order-functions&#34;&gt;&#xA;  Higher Order Functions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#higher-order-functions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;designing-functions&#34;&gt;&#xA;  Designing Functions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#designing-functions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;describing-functions&#34;&gt;&#xA;  Describing Functions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#describing-functions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Aspect&lt;/th&gt;&#xA;          &lt;th&gt;Example&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;The domain of a function is the expected range of inputs (similarly to a domain in mathematics)&lt;/td&gt;&#xA;          &lt;td&gt;x is a string&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;The range of a function is the set of output values that could be returned&lt;/td&gt;&#xA;          &lt;td&gt;Function square returns a non-negative number&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;The behavior of a (pure) function is the relationship between the input and the output&lt;/td&gt;&#xA;          &lt;td&gt;Function square returns the square of an input x&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;dont-repeat-yourself&#34;&gt;&#xA;  Don&amp;rsquo;t Repeat Yourself!&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#dont-repeat-yourself&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;When making a function, give each function exactly one job, but allow it to be flexible to apply to many related situations. Doing this allows you to remove redundant code and make your code clearer to read, and easier to write.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Environment Diagrams</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-2/environment-diagrams/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-2/environment-diagrams/</guid>
      <description>&lt;h1 id=&#34;environment-diagrams&#34;&gt;&#xA;  Environment Diagrams&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#environment-diagrams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Environment Diagrams are a good way to visualize how Python deals with its execution, and can also help you to visualize how more complicated pieces of code (e.g. Higher Order Functions) work.&lt;/p&gt;&#xA;&lt;p&gt;PyTutor has a way of converting from code to environment diagrams, so please use that as a resource! The diagrams below are not going to match those from PyTutor exactly due to Markdown constraints, but I will try to emulate them as well as possible.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Basics of Python</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-1/basics-of-python/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-1/basics-of-python/</guid>
      <description>&lt;h1 id=&#34;basics-of-python&#34;&gt;&#xA;  Basics of Python&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basics-of-python&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;expressions-and-values&#34;&gt;&#xA;  Expressions and Values&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#expressions-and-values&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Programs work to manipulate values&lt;/li&gt;&#xA;&lt;li&gt;Expressions in programs evaluate to values&lt;/li&gt;&#xA;&lt;li&gt;Values can have different data types (string, float, boolean, integer, etc.)&lt;/li&gt;&#xA;&lt;li&gt;Python evaluates these expressions, and then (potentially) displays its values&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;data-types&#34;&gt;&#xA;  Data Types&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-types&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;table&gt;&#xA;  &lt;thead&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;th&gt;Data Type&lt;/th&gt;&#xA;          &lt;th&gt;Example Values&lt;/th&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/thead&gt;&#xA;  &lt;tbody&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Integers&lt;/td&gt;&#xA;          &lt;td&gt;2, 44, 25&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Floats&lt;/td&gt;&#xA;          &lt;td&gt;3.14, 2.73, 69.69432&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Booleans&lt;/td&gt;&#xA;          &lt;td&gt;True, False&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;      &lt;tr&gt;&#xA;          &lt;td&gt;Strings&lt;/td&gt;&#xA;          &lt;td&gt;&amp;ldquo;Hi&amp;rdquo;, &amp;ldquo;ben&amp;rdquo;&lt;/td&gt;&#xA;      &lt;/tr&gt;&#xA;  &lt;/tbody&gt;&#xA;&lt;/table&gt;&#xA;&lt;h2 id=&#34;operators&#34;&gt;&#xA;  Operators&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#operators&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;These are pretty self-explanatory&lt;/p&gt;</description>
    </item>
    <item>
      <title>Calculator Language</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-12/calculator-language/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-12/calculator-language/</guid>
      <description>&lt;h1 id=&#34;calculator-language&#34;&gt;&#xA;  Calculator Language&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#calculator-language&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;compiled-vs-interpreted&#34;&gt;&#xA;  Compiled vs Interpreted&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#compiled-vs-interpreted&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;High Level Languages (basically languages with a lot of abstraction from machine code - essentially 1s and 0s) are typically either compiled or interpreted.&lt;/p&gt;&#xA;&lt;h3 id=&#34;compiling&#34;&gt;&#xA;  Compiling&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#compiling&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;When a program is compiled, the source code is directly translated to machine code right from the start - this code can then be distributed and run repeatedly.&lt;/p&gt;&#xA;&lt;h3 id=&#34;interpreted&#34;&gt;&#xA;  Interpreted&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#interpreted&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;When a program is interpreted, the source code is run directly without first compiling it. This gives interpreted languages more overhead, but also makes it such that you remove the time needed for compilation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Containers</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-5/containers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-5/containers/</guid>
      <description>&lt;h1 id=&#34;containers&#34;&gt;&#xA;  Containers&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#containers&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;lists&#34;&gt;&#xA;  Lists&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lists&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A list is a container that can hold a sequence of information (usually related information).&lt;/p&gt;&#xA;&lt;p&gt;Lists can hold any Python values (not the same behaviour in every language), including other lists/objects etc.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;empty &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [] &lt;span style=&#34;color:#75715e&#34;&gt;# empty list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;B &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Ben&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Box&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bufy&amp;#34;&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# Strings&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# Integers&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;floats &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;2.0&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.5&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;7.5&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# Floats&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;nested &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;], &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# Storing a list inside a list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mixed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hi&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3.2&lt;/span&gt;] &lt;span style=&#34;color:#75715e&#34;&gt;# Different data types inside a list&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;list-length&#34;&gt;&#xA;  List Length&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#list-length&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;The globally defined &lt;code&gt;len()&lt;/code&gt; function in Python allows you to find the length of an array, and can be called by simply passing in the array as an argument.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Data Abstraction</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-5/data-abstraction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-5/data-abstraction/</guid>
      <description>&lt;h1 id=&#34;data-abstraction&#34;&gt;&#xA;  Data Abstraction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#data-abstraction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Many values in programs are compound values — a value composed of multiple values (for example coordinates, dates, or geographic positions).&lt;/p&gt;&#xA;&lt;p&gt;By using a data abstraction, you can manipulate compound values as units without needing to worry about the way that values are stored.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pair-abstraction&#34;&gt;&#xA;  Pair Abstraction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#pair-abstraction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;For data that is stored in pairs, we can manipulate these values using a pair data abstraction:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;couple &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pair(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;a&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;b&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; first(couple)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; second(couple)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;By implementing &lt;code&gt;pair()&lt;/code&gt; (our constructor), &lt;code&gt;first()&lt;/code&gt;, and &lt;code&gt;second()&lt;/code&gt; (the selectors), you can access these elements without needing to worry about how the data is stored. The only time that people need to worry about how the data is stored is when implementing the functions themselves. One example (implying that there are multiple ways) of implementing these functions can be seen below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Decorators</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-3/decorators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-3/decorators/</guid>
      <description>&lt;h1 id=&#34;decorators&#34;&gt;&#xA;  Decorators&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#decorators&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Python decorators allow you to wrap functions inside one another easily. These may not be seen that often in the CS61A course, but in general, are pretty good to know due to the simplicity that it has as well as the common usage of it in web frameworks such as Flask, or in larger codebases.&lt;/p&gt;&#xA;&lt;h2 id=&#34;example-usage&#34;&gt;&#xA;  Example Usage&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example-usage&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Let&amp;rsquo;s take this trace function for example:&lt;/p&gt;&#xA;&lt;p&gt;It returns a function that takes a single argument which traces the inputs and outputs of each function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Design</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-3/design/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-3/design/</guid>
      <description>&lt;h1 id=&#34;design&#34;&gt;&#xA;  Design&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#design&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;abstraction&#34;&gt;&#xA;  Abstraction&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#abstraction&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Abstraction (in a CS context) is broadly understood as extracting relevant information from other sources in order to simplify the codebase.&lt;/p&gt;&#xA;&lt;h3 id=&#34;abstraction-by-parameterization&#34;&gt;&#xA;  Abstraction by Parameterization&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#abstraction-by-parameterization&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;This is pretty much DRY (Don&amp;rsquo;t Repeat Yourself). Instead of hard-coding code that have similar structure, you could write a function that takes in parameters (arguments) which can be used to do the same thing. (Taken from CS61A Fall 2021 Design Slides)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Efficiency</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-9/efficiency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-9/efficiency/</guid>
      <description>&lt;h1 id=&#34;efficiency&#34;&gt;&#xA;  Efficiency&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#efficiency&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;The efficiency of an algorithm is very important. While it isn&amp;rsquo;t too important in CS 61A due to the (relatively) small data set and number of computations needed, in big sets of data or some extremely computer taxing computations, efficiency makes a world of a difference in terms of actually being able to make computations.&lt;/p&gt;&#xA;&lt;p&gt;However, CS 61A still wants you to understand how to calculate efficiency in a broad sense.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generators</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-7/generators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-7/generators/</guid>
      <description>&lt;h1 id=&#34;what-is-a-generator&#34;&gt;&#xA;  What is a Generator&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-a-generator&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Generators can be used to create your own iterators with custom values. This is useful when you want to create an iterator with unpredictable results (for example numbers with irregular intervals, possibly based on different arguments in a given function).&lt;/p&gt;&#xA;&lt;p&gt;The way you define a generator function is through the yield keyword (instead of return in a function). In this sense, a generator is a type of iterator that yields results from a generator function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inheritance</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-8/inheritance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-8/inheritance/</guid>
      <description>&lt;h1 id=&#34;inheritance&#34;&gt;&#xA;  Inheritance&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#inheritance&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Inheritance is a powerful tool that is very often used to reduce redundant code. If you have more specific versions of a larger class, inheritance can be extremely useful. Using our Animal class from the Objects notes, we can use all its general attributes, but then add more specific classes.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Animal&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    default_food &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; __init__(self, name, energy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; name&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;food &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;default_food[:]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;energy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; energy&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;times_fed &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;feed&lt;/span&gt;(self, food):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;food &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;food &lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt; [food]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;times_fed &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;energy &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;play&lt;/span&gt;(self):&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; energy &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Not Enough Energy&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;energy &lt;span style=&#34;color:#f92672&#34;&gt;-=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;is_happy &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;# Creates new instance variable&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;name&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; has &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;{&lt;/span&gt;self&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;energy&lt;span style=&#34;color:#e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt; energy.&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my_cat &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; Animal(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sochi&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;my_cat&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;feed(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Tuna&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Instead of making my_cat an instance of the Animal class, we could instead create a Cat class that inherits from the Animal class - meaning that it contains the same class, methods, and instance variables as the Animal class (which can then be overridden).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Interpreting Scheme</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-12/interpreting-scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-12/interpreting-scheme/</guid>
      <description>&lt;h1 id=&#34;interpreting-scheme&#34;&gt;&#xA;  Interpreting Scheme&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#interpreting-scheme&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;Interpreters keep going through an evaluate/apply cycle.&lt;/p&gt;&#xA;&lt;h2 id=&#34;eval&#34;&gt;&#xA;  Eval&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#eval&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;base-case&#34;&gt;&#xA;  Base Case&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#base-case&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Primitive Values&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;recursive-case&#34;&gt;&#xA;  Recursive Case&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#recursive-case&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Evaluate(operator, operands) of call expressions&lt;/li&gt;&#xA;&lt;li&gt;Apply(procedure, arguments)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;apply&#34;&gt;&#xA;  Apply&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#apply&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;base-case-1&#34;&gt;&#xA;  Base Case&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#base-case-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Built in procedures&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;recursive-case-1&#34;&gt;&#xA;  Recursive Case&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#recursive-case-1&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;User defined procedures&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;scheme-specific-traits&#34;&gt;&#xA;  Scheme Specific Traits&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#scheme-specific-traits&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Nearly everything in Scheme is a list (as mentioned countless times); additionally, nearly everything in scheme is a call expression where the operator is evaluated, then the operands are all evaluated, then these operands are applied to the operator.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Iterators</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-7/iterators/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-7/iterators/</guid>
      <description>&lt;h1 id=&#34;what-is-an-iterator&#34;&gt;&#xA;  What is an Iterator&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-is-an-iterator&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;An iterator is an object that provides sequential access to values in an iterable one by one.&lt;/p&gt;&#xA;&lt;p&gt;While you may not see the use of them at the moment, the benefits of using them will be explained a bit later in these sets of notes.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;code&gt;iter(iterable)&lt;/code&gt; returns an iterator over the elements of iterable.&lt;/li&gt;&#xA;&lt;li&gt;&lt;code&gt;next(&amp;lt;iter&amp;gt;)&lt;/code&gt; returns the next element in an iterator.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;]&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;iter_numbers &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; iter(numbers)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next(iter_numbers) &lt;span style=&#34;color:#75715e&#34;&gt;# 1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next(iter_numbers) &lt;span style=&#34;color:#75715e&#34;&gt;# 2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next(iter_numbers) &lt;span style=&#34;color:#75715e&#34;&gt;# 3&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;next(iter_numbers) &lt;span style=&#34;color:#75715e&#34;&gt;# Error (StopIterator exception)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In CS61A, questions will never get to the point where handling the StopIterator error will need to happen, but a try &amp;hellip; except code block can handle that error. If you ever get a StopIterator error in your HW or Lab questions, you can just assume you did something wrong.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Macros and Exceptions</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-12/macros-exceptions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-12/macros-exceptions/</guid>
      <description>&lt;h1 id=&#34;macros-and-exceptions&#34;&gt;&#xA;  Macros and Exceptions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#macros-and-exceptions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;macros&#34;&gt;&#xA;  Macros&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#macros&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;In Scheme, everything is a list. For example, &lt;code&gt;(quotient 1 2)&lt;/code&gt; can also be seen as a Scheme list with the elements quotient, 1, and 2. What the &amp;rsquo; operator lets us do in Scheme is create a list without evaluating certain options, then delay the evaluation until you need it later. For example:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; (&lt;span style=&#34;color:#66d9ef&#34;&gt;define &lt;/span&gt;lst (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;quotient&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;lst&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; lst&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(quotient &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; (eval lst)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;gt;&amp;gt;&amp;gt; (eval (list &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;quotient&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.5&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;quoting&#34;&gt;&#xA;  Quoting&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#quoting&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;There are two ways to quote an expression:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mutability</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-6/mutability/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-6/mutability/</guid>
      <description>&lt;h1 id=&#34;mutability&#34;&gt;&#xA;  Mutability&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#mutability&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;objects&#34;&gt;&#xA;  Objects&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#objects&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;An object is a bundle of data and behaviour, with each type of object called a class.&lt;/p&gt;&#xA;&lt;p&gt;Every value in Python is an object.&lt;/p&gt;&#xA;&lt;p&gt;All objects have attributes, and objects often have associated methods.&lt;/p&gt;&#xA;&lt;h3 id=&#34;example-strings&#34;&gt;&#xA;  Example (Strings)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#example-strings&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;A string is an object — try running &lt;code&gt;type(&amp;quot;&amp;quot;)&lt;/code&gt; in Python console and seeing what it outputs.&lt;/p&gt;&#xA;&lt;p&gt;Strings have attributes (for example the data inside it) and also has methods such as &lt;code&gt;string.upper()&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>No Content This Week</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-10/break/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-10/break/</guid>
      <description>&lt;h1 id=&#34;no-content-this-week&#34;&gt;&#xA;  No Content This Week&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#no-content-this-week&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;No new content was covered this week due to Spring/Thanksgiving break.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Objects</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-7/objects/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-7/objects/</guid>
      <description>&lt;h1 id=&#34;object-oriented-programming-oop&#34;&gt;&#xA;  Object Oriented Programming (OOP)&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#object-oriented-programming-oop&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;OOP is a method for organizing programs. It includes:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Data Abstraction&lt;/li&gt;&#xA;&lt;li&gt;Bundling together related programs/information/behaviour&lt;/li&gt;&#xA;&lt;li&gt;Each object can have its own local state (meaning its own variables), and also knows how to manage its own state.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;OOP is particularly useful when you have many similar things that can be further generalized to avoid repeating redundant code. For example, you could have an Animal object, with other sub-classes of the Animal (for example, Turtle, Cat, Bear, etc.) - this (inheritance) will be covered in the next page.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recursion</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-4/recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-4/recursion/</guid>
      <description>&lt;h1 id=&#34;recursion&#34;&gt;&#xA;  Recursion&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#recursion&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;recursive-functions&#34;&gt;&#xA;  Recursive Functions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#recursive-functions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A function is recursive if the body of the function calls itself (either directly or indirectly).&lt;/p&gt;&#xA;&lt;p&gt;Recursive functions pretty much always lead to a base case by operating on increasingly smaller instances of the problem. A base case is the simplest case possible where a calculation can actually be done.&lt;/p&gt;&#xA;&lt;p&gt;For example, a recursive function to sum the digits in a number can be written as below:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Recursive Data</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-8/recursive-data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-8/recursive-data/</guid>
      <description>&lt;h1 id=&#34;recursive-data&#34;&gt;&#xA;  Recursive Data&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#recursive-data&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;linked-lists&#34;&gt;&#xA;  Linked Lists&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#linked-lists&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Python lists are implemented in a way that makes inserting and deleting from the front of a list very inefficient. This is because Python implemented a list such that the first element of the list is always at the same memory location and elements in a list are located right next to each other, so when something is inserted to the start, everything gets pushed forward by one space in memory to make space for an element.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheme Lists</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-11/scheme-lists/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-11/scheme-lists/</guid>
      <description>&lt;h1 id=&#34;scheme-lists&#34;&gt;&#xA;  Scheme Lists&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#scheme-lists&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;special-forms&#34;&gt;&#xA;  Special Forms&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#special-forms&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;cond--begin&#34;&gt;&#xA;  Cond &amp;amp; Begin&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#cond--begin&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;The &lt;code&gt;cond&lt;/code&gt; special form behaves like if-elif-else statements in Python:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;elif&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;medium&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;small&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Scheme:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-scheme&#34; data-lang=&#34;scheme&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((&amp;gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((&amp;gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) (&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;medium&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;small&lt;/span&gt;)))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;cond &lt;/span&gt;((&amp;gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ((&amp;gt; x &lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;) &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;medium&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      (&lt;span style=&#34;color:#66d9ef&#34;&gt;else &lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;small&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;begin&lt;/code&gt; special form combines multiple expressions into one expression:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;big&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;guy&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;small&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    print(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;fry&amp;#39;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In Scheme:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scheme Specification</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-11/scheme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-11/scheme/</guid>
      <description>&lt;h1 id=&#34;scheme-specification&#34;&gt;&#xA;  Scheme Specification&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#scheme-specification&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;This document describes the variant of Scheme used in CS61A, which is closest to R5RS with some modifications for educational purposes.&lt;/p&gt;&#xA;&lt;h2 id=&#34;overview-and-terminology&#34;&gt;&#xA;  Overview and Terminology&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#overview-and-terminology&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;expressions-and-environments&#34;&gt;&#xA;  Expressions and Environments&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#expressions-and-environments&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Every expression evaluates to a value&lt;/li&gt;&#xA;&lt;li&gt;Some expressions are self-evaluating (numbers, booleans, strings, nil)&lt;/li&gt;&#xA;&lt;li&gt;Frames map symbols to values with optional parent frames&lt;/li&gt;&#xA;&lt;li&gt;Environment lookup follows the chain of parent frames&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;atomic-expressions&#34;&gt;&#xA;  Atomic Expressions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#atomic-expressions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Numbers, booleans, strings, and nil are self-evaluating&lt;/li&gt;&#xA;&lt;li&gt;Symbols evaluate to their bound values in the environment&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;call-expressions&#34;&gt;&#xA;  Call Expressions&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#call-expressions&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Most combinations are evaluated as call expressions with three steps:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sequences</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-5/sequences/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-5/sequences/</guid>
      <description>&lt;h1 id=&#34;sequences&#34;&gt;&#xA;  Sequences&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#sequences&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;lists-in-environment-diagrams&#34;&gt;&#xA;  Lists in Environment Diagrams&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#lists-in-environment-diagrams&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;Lists can represented with box and pointer notation (similarly to functions); however, unlike functions, each element in the array has its own box, and is index labelled.&lt;/p&gt;&#xA;&lt;p&gt;What this implies is that assigning a variable to another list will not create a copy of that list, but rather point towards the same list — this ends up being a correct assumption to make.&lt;/p&gt;</description>
    </item>
    <item>
      <title>SQL</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-13/sql-intro/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-13/sql-intro/</guid>
      <description>&lt;h1 id=&#34;introduction-to-sql&#34;&gt;&#xA;  Introduction to SQL&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#introduction-to-sql&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;SQL (Structured Query Language) is a powerful language used for managing and manipulating relational databases. It allows us to create, read, update, and delete data in a structured way.&lt;/p&gt;&#xA;&lt;h2 id=&#34;basic-concepts&#34;&gt;&#xA;  Basic Concepts&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basic-concepts&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;h3 id=&#34;tables&#34;&gt;&#xA;  Tables&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tables&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;p&gt;Tables are the fundamental structure in SQL databases. They consist of:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Columns (attributes)&lt;/li&gt;&#xA;&lt;li&gt;Rows (records)&lt;/li&gt;&#xA;&lt;li&gt;Primary keys (unique identifiers)&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Example table structure:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;TABLE&lt;/span&gt; students (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    id INTEGER &lt;span style=&#34;color:#66d9ef&#34;&gt;PRIMARY&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;KEY&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name TEXT &lt;span style=&#34;color:#66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;NULL&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    major TEXT,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    gpa FLOAT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;basic-operations&#34;&gt;&#xA;  Basic Operations&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#basic-operations&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h3&gt;&#xA;&lt;h4 id=&#34;select&#34;&gt;&#xA;  SELECT&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#select&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h4&gt;&#xA;&lt;p&gt;The most common operation to retrieve data:&lt;/p&gt;</description>
    </item>
    <item>
      <title>String Interpolation and Representation</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-8/representation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-8/representation/</guid>
      <description>&lt;h1 id=&#34;string-interpolation-and-representation&#34;&gt;&#xA;  String Interpolation and Representation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#string-interpolation-and-representation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;string-interpolation&#34;&gt;&#xA;  String Interpolation&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#string-interpolation&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;This is not part of representation, but is instead an extremely useful tool to make writing strings with multiple variables far cleaner. You may have already seen me use string interpolation earlier on in the course.&lt;/p&gt;&#xA;&lt;p&gt;In Python, the cleanest way to use string interpolation is with an f-string, where the letter f is appended before quotation marks.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can see the syntax highlighting sees the f in a different colour! With this notation, we can then put expressions in our string itself and have them evaluate to &amp;lsquo;proper&amp;rsquo; values. Different languages deal with string interpolation in different manners.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tree Recursion</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-4/tree-recursion/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-4/tree-recursion/</guid>
      <description>&lt;h1 id=&#34;tree-recursion&#34;&gt;&#xA;  Tree Recursion&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#tree-recursion&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;h2 id=&#34;order-of-recursive-calls&#34;&gt;&#xA;  Order of Recursive Calls&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#order-of-recursive-calls&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;If you know the behaviour of environment diagrams, you could derive the behaviour of recursive calls.&lt;/p&gt;&#xA;&lt;p&gt;Recaling how environment diagrams behave, a new frame is opened when a user-defined function call occurs, meaning that whenever a recursive function is called on a non-base case scenario, a new frame is opened, and that frame will be evaluated.&lt;/p&gt;&#xA;&lt;p&gt;As a result, in a tree recursive return value (more on that later), for example &lt;code&gt;recursive(3) + recursive(4)&lt;/code&gt;, the whole value of &lt;code&gt;recursive(3)&lt;/code&gt; is evaluated first before &lt;code&gt;recursive(4)&lt;/code&gt; is evaluated (due to the order of operations of Python).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Trees</title>
      <link>https://neilthomass.github.io:1313/cs61a/docs/week-6/trees/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://neilthomass.github.io:1313/cs61a/docs/week-6/trees/</guid>
      <description>&lt;h1 id=&#34;trees&#34;&gt;&#xA;  Trees&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#trees&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h1&gt;&#xA;&lt;p&gt;A tree is an abstract data structure (basically not implemented by default in Python), which means we need to use data abstractions in order to implement this structure.&lt;/p&gt;&#xA;&lt;h2 id=&#34;what-does-a-tree-look-like&#34;&gt;&#xA;  What does a tree look like?&#xA;  &lt;a class=&#34;anchor&#34; href=&#34;#what-does-a-tree-look-like&#34;&gt;#&lt;/a&gt;&#xA;&lt;/h2&gt;&#xA;&lt;p&gt;A tree has a root and a list of branches, where each branch is a tree itself.&lt;/p&gt;&#xA;&lt;p&gt;A tree with zero branches (the white circles in the drawing above) is called a leaf. A tree also starts at the root, which in the drawing above, is the blue circle.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
